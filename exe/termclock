#!/usr/bin/env ruby
require 'termclock'
$-v = nil
STDOUT.sync = true

def version
	emoji = ?üïê.ord.-(1).chr('utf-8')
	Time.now.strftime('%I').to_i.times { emoji.next! }

	_v = "#{emoji} This is Termclock v#{Termclock::VERSION}"
	vl_2 = _v.length / 2

	v_col1 = Termclock.hex2rgb('ff0')
	v_col2 = Termclock.hex2rgb('f55')
	v_col3 = Termclock.hex2rgb('55f')

	_v[0...vl_2].gradient(v_col1, v_col2, underline: true, bold: true) <<
		_v[vl_2..-1].gradient(v_col2, v_col3, underline: true, bold: true)
end

if ARGV.any? { |x| x[/\A\-(\-help|h)\z/] }
	puts <<~EOF
		TermClock: A clock that runs on the LinuxTerminal!

		\e[1;4mArguments:\e[0m

		\e[1m1. Help and Version:\e[0m
			--help|-h\t\t\tShows this help section
			--version|-v\t\t\tShows termclock version

		\e[1m2. Style:\e[0m
			--bold|-b\t\t\tMake texts bold
			--italic|-i\t\t\tMake texts italic
			--character=|char=\t\tDraws specified character
			--clean\t\t\t\tJust run the clean bare clock
			--colour=|-c=\t\t\tSpecify hex colour (4 colours)
			\t\t\t\t[ with or without # ]

		\e[1m3. Information:\e[0m
			--no-date|-nd\t\t\tShows no date
			--no-message|-nm\t\tShows no messages
			--no-sysinfo|-ni\t\tShows no system info
			--refresh|r\t\t\tSpecify delay or refresh time
			--text-colour|-tc\t\tSpecify text colour (2 colours)
			--no-logo|-nl\t\t\tDon't show the logo at the bottom

		\e[1m4. Formats:\e[0m
			--date-format=|-df=\t\tSpecify the date format
			--time-format=|-tf=\t\tSpecify the time format

			Usually the format looks like this:
			%H:%M:%S:%2N or %d %B, %Y

			\e[3mRun `date --help` to know more formats\e[0m

		Supported characters are 0 - 9, a - z, /, \\, !, %, and |.

		#{version}
	EOF

	exit 0
end

if ARGV.any? { |x| x[/\A\-(-version|v)\z/] }
	colour = [
		[[255, 100, 100], [100, 100, 255]],
		[[60, 230, 180], [100, 100, 255]],
		[[255, 255, 0], [100, 100, 255]],
		[[255, 80, 170], [255, 200, 0]],
	].sample

	colour.reverse! if rand < 0.5
	puts version
	exit 0
end

begin
	print "\e[?25l"

	arg_col = ARGV.find { |x| x[/\A\-(\-colour|\-color|c|)=.*\z/] } &.split(?=) &.at(1) &.split(?,)

	colours = if arg_col
		abort("4 colours are needed. Example: -c=f55,55f,55f,3eb") if arg_col.length != 4
		arg_col
	else
		%w(ff5555 5555ff 5555ff 33eebb)
	end

	colours.map! { |x|
		begin
			Termclock.hex2rgb(x)
		rescue ArgumentError
			abort $!.to_s
		end
	}

	chars = ARGV.find { |x| x[/\A\-(\-character|char)=.*\z/] } &.split(?=) &.at(1)
	Termclock::ParseCharacters.transform_characters!(*chars) if chars

	_refresh_time = ARGV.find { |x| x[/\A\-(\-refresh|r)=.*\z/] } &.split(?=) &.at(1)
	refresh_time = _refresh_time ? _refresh_time.to_f : 0.1

	_time_format = ARGV.find { |x| x[/\A\-(\-time\-format|tf)=.*\z/] } &.split(?=) &.at(1)
	time_format = _time_format ? _time_format : "%H %M %S %2N"

	_date_format = ARGV.find { |x| x[/\A\-(\-date\-format|df)=.*\z/] } &.split(?=) &.at(1)
	date_format = _date_format ? _date_format : "%a, %d %B %Y"

	text_colours = ARGV.find { |x| x[/\A\-(\-text\-colour|tc)=.*\z/] } &.split(?=) &.at(1) &.split(?,)
	abort("Text colours need 2 colours. Example: -tc=55f,3ce3b5") if text_colours && text_colours.length != 2

	bold = ARGV.any? { |x| x[/\A\-(\-bold|b)\z/] }
	italic = ARGV.any? { |x| x[/\A\-(\-italic|i)\z/] }

	no_print_info = ARGV.any? { |x| x[/\A\-(\-no\-sysinfo|ni)\z/] }
	no_logo = ARGV.any? { |x| x[/\A\-(\-no\-logo|nl)\z/] }
	no_print_message = ARGV.any? { |x| x[/\A\-(\-no\-message|nm)\z/] }
	no_print_date = ARGV.any? { |x| x[/\A\-(\-no\-date|nd)\z/] }

	clean = ARGV.any? { |x| x[/\A\-(\-clean)\z/] }

	if clean
		no_print_info = no_print_message = no_print_date = no_logo = true
	end

	begin
		Time.now.strftime(time_format)
		Time.now.strftime(date_format)
	rescue
		abort "Date / Time format is invalid\n#{$!.to_s}"
	end

	Termclock.start(
		*colours,
		*text_colours,
		sleep: refresh_time,
		bold: bold,
		italic: italic,
		print_info: !no_print_info,
		print_message: !no_print_message,
		print_date: !no_print_date,
		no_logo: no_logo,
		time_format: time_format,
		date_format: date_format
	)
rescue Interrupt, SignalException
	print "\e[H\e[2J\e[3J"
ensure
	print "\e[?25h"
end
